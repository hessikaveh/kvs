name: Cargo Build & Test

on:
  [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    name: Rust Project - Latest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
          - nightly
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      - name: Install Clippy and Lint
        run: rustup component add clippy && cargo clippy

      - name: Build project
        run: cargo build --verbose

      - name: Run tests and save output
        run: |
          cargo test --all --verbose 2>&1 | tee test_output.txt
        continue-on-error: true

      - name: Analyze Test Results
        run: |
          total_tests=$(grep -o 'running [0-9]\+ test' test_output.txt | grep -o '[0-9]\+')
          test_states=($(grep -o 'test result: ok. [0-9]\+ passed; [0-9]\+ failed;' test_output.txt | grep -o '[0-9]\+'))

          # Header for summary
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Total Tests | Passed | Failed |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| $total_tests | ${test_states[0]} | ${test_states[1]} |" >> $GITHUB_STEP_SUMMARY

          # Parse failed test cases
          if [ "$tests_states[1]" -gt 0 ]; then
            echo "## Failed Tests" >> $GITHUB_STEP_SUMMARY
            echo "| Test Name | Error Message |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|---------------|" >> $GITHUB_STEP_SUMMARY
            grep '^test .* ... FAILED' test_output.txt | while read -r line; do
              test_name=$(echo "$line" | cut -d ' ' -f2)
              error_msg=$(grep -A1 "$test_name" test_output.txt | tail -n 1)
              echo "| $test_name | $error_msg |" >> $GITHUB_STEP_SUMMARY
            done
            exit 1  # Fail the job if there are failed tests
          fi
